## Upload libraries
library(data.table)
library(dplyr)
library(tidyr)
library(tidyverse)
library(org.Hs.eg.db)
library(topGO)
library(clusterProfiler)
library(rrvgo)
library(AnnotationDbi)
getwd()
3x -> read.table(file = "gene_names_3x.txt", sep = "\t")
analysis_3 -> read.table(file = "gene_names_3x.txt", sep = "\t")
analysis_3 <- read.table(file = "gene_names_3x.txt", sep = "\t")
View(analysis_3)
analysis_3 <- read.table(file = "gene_names_3x.txt", sep = "\t", header = TRUE)
View(analysis_3)
### GO TERMS ###
GO_analysis <- function (genes, ontology){
clusterProfiler::enrichGO(gene          = genes,
# universe      = universe,
OrgDb         = org.Hs.eg.db,
keyType       = 'ENSEMBL',
ont           = ontology, # "BP", "MF", "CC" o "ALL"
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05)
}
GO_BP <- GO_analysis(analysis_3, "BP")
### GO TERMS ###
GO_analysis <- function (genes, ontology){
clusterProfiler::enrichGO(gene          = genes,
# universe      = universe,
OrgDb         = org.Hs.eg.db,
keyType       = 'SYMBOL',
ont           = ontology, # "BP", "MF", "CC" o "ALL"
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05)
}
GO_BP <- GO_analysis(analysis_3, "BP")
View(analysis_3)
entrez_ids <- AnnotationDbi::select(org.Hs.eg.db,
keys = analysis_3,
keytype = "SYMBOL",
columns = "ENTREZID")
analysis_3 <- as.character(read.table(file = "gene_names_3x.txt", sep = "\t", header = TRUE))
entrez_ids <- AnnotationDbi::select(org.Hs.eg.db,
keys = analysis_3,
keytype = "SYMBOL",
columns = "ENTREZID")
analysis_3 <- read.table(file = "gene_names_3x.txt", sep = "\t", header = TRUE)
#### KEGG pathways ####
entrez_ids <- AnnotationDbi::select(org.Hs.eg.db,
keys = analysis_3, #Change Keys when you change the analysis
keytype = "SYMBOL",
columns = "ENTREZID")
#### KEGG pathways ####
analysis_3 <- analysis_3@rownames
#### KEGG pathways ####
analysis_3 <- analysis_3@rowname
#### KEGG pathways ####
analysis_3 <- as.list(analysis_3)
View(analysis_3)
analysis_3 <- analysis_3@rownames
View(analysis_3)
analysis_3 <- analysis_3[["GeneName"]]
entrez_ids <- AnnotationDbi::select(org.Hs.eg.db,
keys = analysis_3, #Change Keys when you change the analysis
keytype = "SYMBOL",
columns = "ENTREZID")
View(entrez_ids)
entrez_ids <- entrez_ids[ , "ENTREZID"]
entrez_ids <- entrez_ids[!is.na(entrez_ids)]
KEGG_analysis <- enrichKEGG(entrez_ids,
organism = "hsa",
keyType = "kegg",
pvalueCutoff = 0.05,
pAdjustMethod = "BH",
#universe,
minGSSize = 10,
maxGSSize = 500,
qvalueCutoff = 0.2,
use_internal_data = FALSE)
KEGG_pathways <- as.data.frame(KEGG_analysis@result[["ID"]])
KEGG_pathways$`KEGG_analysis@result[["ID"]]`<- NULL
KEGG_pathways$ID=KEGG_analysis@result[["ID"]]
KEGG_pathways$Description=KEGG_analysis@result[["Description"]]
KEGG_pathways$geneID=KEGG_analysis@result[["geneID"]]
KEGG_pathways$Count=KEGG_analysis@result[["Count"]]
KEGG_pathways$p_adjust=KEGG_analysis@result[["p.adjust"]]
KEGG_pathways$pvalue=KEGG_analysis@result[["pvalue"]]
KEGG_pathways$GeneRatio=KEGG_analysis@result[["GeneRatio"]]
View(KEGG_pathways)
GO_BP <- GO_analysis(entrez_ids, "BP")
clusterProfiler::enrichGO(gene          = genes,
# universe      = universe,
OrgDb         = org.Hs.eg.db,
keyType       = 'ENTREZID',
ont           = ontology, # "BP", "MF", "CC" o "ALL"
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05)
### GO TERMS ###
GO_analysis <- function (genes, ontology){
clusterProfiler::enrichGO(gene          = genes,
# universe      = universe,
OrgDb         = org.Hs.eg.db,
keyType       = 'ENTREZID',
ont           = ontology, # "BP", "MF", "CC" o "ALL"
pAdjustMethod = "BH",
pvalueCutoff  = 0.05,
qvalueCutoff  = 0.05)
}
GO_BP <- GO_analysis(entrez_ids, "BP")
View(GO_BP)
GO_BP_df <- as.data.frame(GO_BP@result)
View(GO_BP_df)
## Upload libraries
library(data.table)
library(dplyr)
library(tidyr)
library(tidyverse)
library(org.Hs.eg.db)
library(topGO)
library(clusterProfiler)
library(rrvgo)
library(AnnotationDbi)
##### ALA PARENTAL ########
setwd("E:\\IRBLLEIDA/Exome-Sequencing/ALA/out_1/tables/")
##### ALA PARENTAL ########
setwd("E:\\IRBLLEIDA/Exome-Sequencing/ALA/out_1/tables/")
### Para leer el archivo comprimido ###
z <- read.table(gzfile("calls.tsv.gz"))
z <- z[-1,]
names(z) <- as.matrix(z[1, ])
z <- z[-1, ]
z[] <- lapply(z, function(x) type.convert(as.character(x)))
View(z)
indels_high <- z %>% filter(str_detect(ANN, 'ablation'))
View(indels_high)
indels_high$ANN
indels_high <- z %>% filter(str_detect(ANN, 'splice_donor_variant'))
View(indels_high)
indels_high$ANN
library(data.table)
library(DESeq2)
library(ggplot2)
library(dplyr)
library(org.Hs.eg.db)
library(AnnotationDbi)
library(clusterProfiler)
library(ggbeeswarm)
library(DOSE)
library(ReactomePA)
library(EnhancedVolcano)
### 6 vs 6 MasterTable ### Analisis de las 6 lineas celulares de cada extremo.
setwd("C:\\Users/usuari/Desktop/TAS-102-RNA-Seq/DEG_Master_Table/6vs6/")
Rmatrix <- as.matrix(read.csv("Rmatrix6vs6.txt", header = TRUE, sep = "\t", row.names = "Geneid"))
metaData <- as.matrix(read.csv("metaData6vs6.txt", header = TRUE, sep = "\t"))
Rmatrix <- as.matrix(read.csv("Rmatrix6vs6.txt", header = TRUE, sep = "\t", row.names = "Geneid"))
metaData <- as.matrix(read.csv("metaData6vs6.txt", header = TRUE, sep = "\t"))
View(metaData)
Rmatrix1 <- na.omit(Rmatrix)
dim(Rmatrix1)
dds <- DESeqDataSetFromMatrix(countData = Rmatrix1,
colData = metaData,
design = ~dex, tidy = FALSE)
### This command let us to save genes with more than 1 count, matrix is smaller ###
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
### Run DESeq2 ###
dds <- DESeq(dds)
res <- results(dds)
head(results(dds, tidy=TRUE))
### Sort by p.adj ###
res <- res[order(res$padj), ]
head(res)
### Filtering: multiple test correction: genes with padj < 0.2 ###
resSig <- subset(res, padj < 0.2)
head(resSig[ order(resSig$log2FoldChange, decreasing = FALSE), ]) #To see results
### Save dataframe wit gene name, log2FC, pvalue and padj
resSig_log2FC <- as.data.frame(cbind(resSig@rownames, resSig$log2FoldChange, resSig$pvalue, resSig$padj))
colnames(resSig_log2FC) <- c("GeneName", "log2FC", "pvalue", "padj")
View(resSig_log2FC)
### Now, we are filtering by log2FoldChange to clasify which are up or down regulated.
#Using the data that pass multiple test correction (ADJUSTED P-VALUE < 0.02)
log2FC_UP <- subset(resSig, resSig$log2FoldChange > 1.5)
log2FC_UP <- log2FC_UP[order(log2FC_UP$log2FoldChange, decreasing = TRUE), ]
log2FC_DOWN <- subset(resSig, resSig$log2FoldChange < -1.5)
log2FC_DOWN <- log2FC_DOWN[order(log2FC_DOWN$log2FoldChange, decreasing = FALSE), ]
#We create the plots in which we can see the differences between Resistants and Sensibles ###
geneCounts <- plotCounts(dds, gene = "RPS4Y1", intgroup = c("dex", "celltype", "id"), returnData=TRUE)
# Plotting the X gene normalized counts, using the samplenames (rownames of d as labels)
ggplot(geneCounts, aes(x = dex, y = count, color = celltype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(geneCounts))) +
theme_bw() +
ggtitle("RPS4Y1") +
theme(plot.title = element_text(hjust = 0.5))
### To see the expression of a gene in each cell lines ###
d <- plotCounts(dds, gene="TM4SF18", intgroup="dex", returnData=TRUE)
ggplot(d, aes(x=dex, y=count, color=dex)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
geom_text_repel(aes(label = name)) +
theme_bw() +
ggtitle("Gene RPS4Y1") +
theme(plot.title=element_text(hjust=0.5))
### To see the expression of a gene in each cell lines ###
d <- plotCounts(dds, gene="RPS4Y1", intgroup="dex", returnData=TRUE)
d$name <- rownames(d)
ggplot(d, aes(x=dex, y=count, color=dex)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
geom_text_repel(aes(label = name)) +
theme_bw() +
ggtitle("Gene RPS4Y1") +
theme(plot.title=element_text(hjust=0.5))
#We create the plots in which we can see the differences between Resistants and Sensibles ###
geneCounts <- plotCounts(dds, gene = "RPS4Y1", intgroup = c("dex", "celltype", "id"), returnData=TRUE)
# Plotting the X gene normalized counts, using the samplenames (rownames of d as labels)
ggplot(geneCounts, aes(x = dex, y = count, color = celltype)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(geneCounts))) +
theme_bw() +
ggtitle("RPS4Y1") +
theme(plot.title = element_text(hjust = 0.5))
View(metaData)
#We create the plots in which we can see the differences between Resistants and Sensibles ###
geneCounts <- plotCounts(dds, gene = "RPS4Y1", intgroup = c("dex", "celltype", "id"), returnData=TRUE)
# Plotting the X gene normalized counts, using the samplenames (rownames of d as labels)
ggplot(geneCounts, aes(x = celltype, y = count, color = dex)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(geneCounts))) +
theme_bw() +
ggtitle("RPS4Y1") +
theme(plot.title = element_text(hjust = 0.5))
#We create the plots in which we can see the differences between Resistants and Sensibles ###
geneCounts <- plotCounts(dds, gene = "CRABP2", intgroup = c("dex", "celltype", "id"), returnData=TRUE)
# Plotting the X gene normalized counts, using the samplenames (rownames of d as labels)
ggplot(geneCounts, aes(x = celltype, y = count, color = dex)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(geneCounts))) +
theme_bw() +
ggtitle("CRABP2") +
theme(plot.title = element_text(hjust = 0.5))
### 6 vs Rest MasterTable ### Analysis of 6 cell lines of the right side of histogram vs ALL ###
setwd("C:\\Users/usuari/Desktop/TAS-102-RNA-Seq/DEG_Master_Table/6vsALL/")
Rmatrix <- as.matrix(read.csv("Rmatrix6vsALL.txt", header = TRUE, sep = "\t", row.names = "Geneid"))
metaData <- as.matrix(read.csv("metaData6vsALL.txt", header = TRUE, sep = "\t"))
Rmatrix1 <- na.omit(Rmatrix)
dim(Rmatrix1)
dds <- DESeqDataSetFromMatrix(countData = Rmatrix1,
colData = metaData,
design = ~dex, tidy = FALSE)
### This command let us to save genes with more than 1 count, matrix is smaller ###
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
### Run DESeq2 ###
dds <- DESeq(dds)
res <- results(dds)
head(results(dds, tidy=TRUE))
### Sort by p.adj ###
res <- res[order(res$padj), ]
head(res)
### Filtering: multiple test correction: genes with padj < 0.2 ###
resSig <- subset(res, padj < 0.2)
head(resSig[ order(resSig$log2FoldChange, decreasing = FALSE), ]) #To see results
### Save dataframe wit gene name, log2FC, pvalue and padj
resSig_log2FC <- as.data.frame(cbind(resSig@rownames, resSig$log2FoldChange, resSig$pvalue, resSig$padj))
### Now, we are filtering by log2FoldChange to clasify which are up or down regulated.
#Using the data that pass multiple test correction (ADJUSTED P-VALUE < 0.02)
log2FC_UP <- subset(resSig, resSig$log2FoldChange > 1.5)
log2FC_UP <- log2FC_UP[order(log2FC_UP$log2FoldChange, decreasing = TRUE), ]
log2FC_DOWN <- subset(resSig, resSig$log2FoldChange < -1.5)
log2FC_DOWN <- log2FC_DOWN[order(log2FC_DOWN$log2FoldChange, decreasing = FALSE), ]
View(log2FC_UP)
View(resSig_log2FC)
colnames(resSig_log2FC) <- c("GeneName", "log2FC", "pvalue", "padj")
#We create the plots in which we can see the differences between Resistants and Sensibles ###
geneCounts <- plotCounts(dds, gene = "RPS4Y1", intgroup = c("dex", "celltype", "id"), returnData=TRUE)
# Plotting the X gene normalized counts, using the samplenames (rownames of d as labels)
ggplot(geneCounts, aes(x = celltype, y = count, color = dex)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(geneCounts))) +
theme_bw() +
ggtitle("RPS4Y1") +
theme(plot.title = element_text(hjust = 0.5))
#We create the plots in which we can see the differences between Resistants and Sensibles ###
geneCounts <- plotCounts(dds, gene = "SCG2", intgroup = c("dex", "celltype", "id"), returnData=TRUE)
# Plotting the X gene normalized counts, using the samplenames (rownames of d as labels)
ggplot(geneCounts, aes(x = celltype, y = count, color = dex)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(geneCounts))) +
theme_bw() +
ggtitle("SCG2") +
theme(plot.title = element_text(hjust = 0.5))
### CD vs PD ### Analysis of 6 cell lines of the right side of histogram vs ALL ###
setwd("C:\\Users/usuari/Desktop/TAS-102-RNA-Seq/DEG_Master_Table/RECIST/")
Rmatrix <- as.matrix(read.csv("RmatrixCDvsPD.txt", header = TRUE, sep = "\t", row.names = "Geneid"))
metaData <- as.matrix(read.csv("metaDataCDvsPD.txt", header = TRUE, sep = "\t"))
Rmatrix1 <- na.omit(Rmatrix)
dim(Rmatrix1)
dds <- DESeqDataSetFromMatrix(countData = Rmatrix1,
colData = metaData,
design = ~dex, tidy = FALSE)
### This command let us to save genes with more than 1 count, matrix is smaller ###
keep <- rowSums(counts(dds)) > 1
dds <- dds[keep,]
### Run DESeq2 ###
dds <- DESeq(dds)
res <- results(dds)
### Sort by p.adj ###
res <- res[order(res$padj), ]
### Filtering: multiple test correction: genes with padj < 0.2 ###
resSig <- subset(res, padj < 0.2)
### Save dataframe wit gene name, log2FC, pvalue and padj
resSig_log2FC <- as.data.frame(cbind(resSig@rownames, resSig$log2FoldChange, resSig$pvalue, resSig$padj))
colnames(resSig_log2FC) <- c("GeneName", "log2FC", "pvalue", "padj")
### Now, we are filtering by log2FoldChange to clasify which are up or down regulated.
#Using the data that pass multiple test correction (ADJUSTED P-VALUE < 0.02)
log2FC_UP <- subset(resSig, resSig$log2FoldChange > 1.5)
log2FC_UP <- log2FC_UP[order(log2FC_UP$log2FoldChange, decreasing = TRUE), ]
log2FC_DOWN <- subset(resSig, resSig$log2FoldChange < -1.5)
log2FC_DOWN <- log2FC_DOWN[order(log2FC_DOWN$log2FoldChange, decreasing = FALSE), ]
View(resSig_log2FC)
#We create the plots in which we can see the differences between Resistants and Sensibles ###
geneCounts <- plotCounts(dds, gene = "TM4SF4", intgroup = c("dex", "celltype", "id"), returnData=TRUE)
# Plotting the X gene normalized counts, using the samplenames (rownames of d as labels)
ggplot(geneCounts, aes(x = celltype, y = count, color = dex)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(geneCounts))) +
theme_bw() +
ggtitle("TM4SF4") +
theme(plot.title = element_text(hjust = 0.5))
#We create the plots in which we can see the differences between Resistants and Sensibles ###
geneCounts <- plotCounts(dds, gene = "FAM3B", intgroup = c("dex", "celltype", "id"), returnData=TRUE)
# Plotting the X gene normalized counts, using the samplenames (rownames of d as labels)
ggplot(geneCounts, aes(x = celltype, y = count, color = dex)) +
geom_point(position=position_jitter(w = 0.1,h = 0)) +
geom_text_repel(aes(label = rownames(geneCounts))) +
theme_bw() +
ggtitle("FAM3B") +
theme(plot.title = element_text(hjust = 0.5))
### VOLCANO PLOT to see easier the log2fc and the p value ###
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue', # change if we use padj
title = 'TAS102 6 vs ALL',
pCutoff = 0.05,
FCcutoff = 2.5,
pointSize = 3.0,
labSize = 6.0,
col=c('black', 'black', 'black', 'red3'),
colAlpha = 1)
### VOLCANO PLOT to see easier the log2fc and the p value ###
EnhancedVolcano(res,
lab = rownames(res),
x = 'log2FoldChange',
y = 'pvalue', # change if we use padj
title = 'TAS102 6 vs ALL',
pCutoff = 0.05,
FCcutoff = 1.5,
pointSize = 3.0,
labSize = 6.0,
col=c('black', 'black', 'black', 'red3'),
colAlpha = 1)
